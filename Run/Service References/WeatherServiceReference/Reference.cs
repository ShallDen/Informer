//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Run.WeatherServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.learn2develop.net/", ConfigurationName="WeatherServiceReference.WeatherService", CallbackContract=typeof(Run.WeatherServiceReference.WeatherServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface WeatherService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.learn2develop.net/WeatherService/RegisterClient")]
        void RegisterClient(System.Guid guid, OpenWeatherMap.CurrentWeatherRequest currentWeatherRequest);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.learn2develop.net/WeatherService/RegisterClient")]
        System.Threading.Tasks.Task RegisterClientAsync(System.Guid guid, OpenWeatherMap.CurrentWeatherRequest currentWeatherRequest);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.learn2develop.net/WeatherService/UnRegisterClient")]
        void UnRegisterClient(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.learn2develop.net/WeatherService/UnRegisterClient")]
        System.Threading.Tasks.Task UnRegisterClientAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WeatherServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://www.learn2develop.net/WeatherService/OnWeatherReceived")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OpenWeatherMap.CurrentWeatherResponse))]
        void OnWeatherReceived(OpenWeatherMap.WeatherItem weather);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WeatherServiceChannel : Run.WeatherServiceReference.WeatherService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherServiceClient : System.ServiceModel.DuplexClientBase<Run.WeatherServiceReference.WeatherService>, Run.WeatherServiceReference.WeatherService {
        
        public WeatherServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WeatherServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WeatherServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterClient(System.Guid guid, OpenWeatherMap.CurrentWeatherRequest currentWeatherRequest) {
            base.Channel.RegisterClient(guid, currentWeatherRequest);
        }
        
        public System.Threading.Tasks.Task RegisterClientAsync(System.Guid guid, OpenWeatherMap.CurrentWeatherRequest currentWeatherRequest) {
            return base.Channel.RegisterClientAsync(guid, currentWeatherRequest);
        }
        
        public void UnRegisterClient(System.Guid id) {
            base.Channel.UnRegisterClient(id);
        }
        
        public System.Threading.Tasks.Task UnRegisterClientAsync(System.Guid id) {
            return base.Channel.UnRegisterClientAsync(id);
        }
    }
}
